"""
Text Summarization using Google Gemini API via LangChain

This module provides functionality to generate summaries of input text using Google's Gemini API
through LangChain's ChatGoogleGenerativeAI integration. The script uses LangChain to interact
with the Gemini model and generate concise summaries of the provided text.

Requirements:
    - langchain-google-genai library: pip install langchain-google-genai
    - GOOGLE_API_KEY environment variable set with your Google API key

Usage:
    Set your Google API key as an environment variable:
    export GOOGLE_API_KEY="your_api_key_here"
    
    Then run the script or import the function:
    python gemini_text_summarizer.py

Author: Generated for text summarization tasks
"""

import os
from langchain_google_genai import ChatGoogleGenerativeAI


def generate_summary(input_text):
    """
    Generate a summary of the input text using Google Gemini API via LangChain.
    
    This function takes a text input and uses Google's Gemini AI model through LangChain's
    ChatGoogleGenerativeAI to generate a concise summary. The API key is retrieved from 
    the GOOGLE_API_KEY environment variable.
    
    Args:
        input_text (str): The text to be summarized. Should be a non-empty string.
    
    Returns:
        str: A summary of the input text generated by Gemini AI.
    
    Raises:
        ValueError: If input_text is empty or None.
        Exception: If API key is not found or API call fails.
    
    Example:
        >>> text = "Your long text here..."
        >>> summary = generate_summary(text)
        >>> print(summary)
    """
    # Validate input
    if not input_text or not input_text.strip():
        raise ValueError("Input text cannot be empty or None")
    
    # Get API key from environment variable
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise Exception("GOOGLE_API_KEY environment variable not found. Please set your API key.")
    
    try:
        # Initialize the ChatGoogleGenerativeAI model
        llm = ChatGoogleGenerativeAI(
            model="gemini-2.0-flash",
            google_api_key=api_key,
            temperature=0.3
        )
        
        # Create the prompt for summarization
        prompt = f"Please provide a concise summary of the following text:\n\n{input_text}"
        
        # Generate the summary
        response = llm.invoke(prompt)
        
        return response.content
        
    except Exception as e:
        raise Exception(f"Error generating summary: {str(e)}")


def main():
    """
    Main function to demonstrate the text summarization functionality.
    """
    # Example text for demonstration
    sample_text = """
    Artificial Intelligence (AI) has become one of the most transformative technologies of the 21st century.
    It encompasses various subfields including machine learning, natural language processing, computer vision,
    and robotics. Machine learning, a subset of AI, enables systems to automatically learn and improve from
    experience without being explicitly programmed. Deep learning, which uses neural networks with multiple
    layers, has been particularly successful in tasks such as image recognition, speech recognition, and
    language translation. The applications of AI are vast and growing, ranging from healthcare and finance
    to transportation and entertainment. However, the rapid advancement of AI also raises important questions
    about ethics, job displacement, and the need for proper regulation to ensure beneficial outcomes for society.
    """
    
    try:
        print("Text Summarization using Google Gemini API via LangChain")
        print("=" * 60)
        print("\nOriginal Text:")
        print(sample_text)
        
        print("\nGenerating summary...")
        summary = generate_summary(sample_text)
        
        print("\nSummary:")
        print(summary)
        
    except Exception as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main()